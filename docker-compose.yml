version: '3.8'

services:
  # OpenCar API Service
  opencar-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: opencar-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - OPENCAR_ENV=production
      - OPENCAR_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OPENCAR_API_HOST=0.0.0.0
      - OPENCAR_API_PORT=8000
      - OPENCAR_DEBUG=${DEBUG:-false}
      - OPENCAR_DATABASE_URL=postgresql://opencar:${POSTGRES_PASSWORD:-opencar123}@postgres:5432/opencar
      - OPENCAR_REDIS_URL=redis://redis:6379/0
      - OPENCAR_OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENCAR_SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - opencar-data:/app/data
      - opencar-models:/app/models
      - opencar-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opencar-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: opencar-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=opencar
      - POSTGRES_USER=opencar
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-opencar123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - opencar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opencar -d opencar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: opencar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - opencar-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opencar-celery-worker
    restart: unless-stopped
    command: celery -A opencar.tasks worker --loglevel=info --concurrency=4
    environment:
      - OPENCAR_ENV=production
      - OPENCAR_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OPENCAR_DATABASE_URL=postgresql://opencar:${POSTGRES_PASSWORD:-opencar123}@postgres:5432/opencar
      - OPENCAR_REDIS_URL=redis://redis:6379/0
      - OPENCAR_OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      - opencar-data:/app/data
      - opencar-models:/app/models
      - opencar-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opencar-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opencar-celery-beat
    restart: unless-stopped
    command: celery -A opencar.tasks beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - OPENCAR_ENV=production
      - OPENCAR_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OPENCAR_DATABASE_URL=postgresql://opencar:${POSTGRES_PASSWORD:-opencar123}@postgres:5432/opencar
      - OPENCAR_REDIS_URL=redis://redis:6379/0
    volumes:
      - opencar-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opencar-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: opencar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - opencar-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: opencar-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - opencar-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: opencar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - opencar-api
    networks:
      - opencar-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: opencar-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - opencar-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: opencar-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - opencar-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: opencar-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - opencar-network

# Named volumes for data persistence
volumes:
  opencar-data:
    driver: local
  opencar-models:
    driver: local
  opencar-logs:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local

# Custom network
networks:
  opencar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 